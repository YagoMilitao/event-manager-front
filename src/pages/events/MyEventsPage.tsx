import { useState } from 'react';
import {
Â  Â  Container,
Â  Â  TextField,
Â  Â  Typography,
Â  Â  Button,
Â  Â  Box,
} from '@mui/material';
// import { useAppSelector } from '../../store/hooks';
import { toast } from 'react-toastify';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { useAppSelector } from '../../store/hooks';

const initialOrganizer = {
   nome: '', 
   email: '', 
   whatsapp: '', 
   instagram: 'https://www.instagram.com/' 
};

export default function CreateEventPage() {
    const token = useAppSelector((state) => state.auth.token);
    const navigate = useNavigate();
    const [form, setForm] = useState({
    Â  Â  titulo: '',
    Â  Â  descricao: '',
    Â  Â  data: '',
    Â  Â  horaInicio: '',
    Â  Â  horaFim: '',
    Â  Â  local: '',
    Â  Â  preco: 0,
    Â  Â  traje: '',
    Â  Â  organizadores: [initialOrganizer], // âœ… Array de organizadores
    Â  Â  image: null as File | null,
    });

Â  Â  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value, files } = e.target;

        if (name === 'image' && files) {
            setForm({ ...form, image: files[0] });
        } else if (name === 'horaInicio') {
            const formattedTime = value.replace(':', ''); // Remove o ":"
            setForm({ ...form, [name]: formattedTime });
        } else {
            setForm({ ...form, [name]: value });
        }
    };


Â  Â  const handleOrganizerChange = (
Â  Â  Â  Â  e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
Â  Â  Â  Â  index: number, // âœ… Recebe o Ã­ndice do organizador
Â  Â  Â  Â  field: string
Â  Â  ) => {
Â  Â  Â  Â  const updatedOrganizers = [...form.organizadores];
Â  Â  Â  Â  updatedOrganizers[index] = {
Â  Â  Â  Â  Â  Â  ...updatedOrganizers[index],
Â  Â  Â  Â  Â  Â  [field]: e.target.value,
Â  Â  Â  Â  };
Â  Â  Â  Â  setForm({ ...form, organizadores: updatedOrganizers });
Â  Â  };
Â  Â  const handleAddOrganizer = () => {
Â  Â  Â  Â  setForm({ ...form, organizadores: [...form.organizadores, initialOrganizer] });
Â  Â  };
Â  Â  const handleSubmit = async () => {
Â  Â  Â  Â  if (!token) {
Â  Â  Â  Â  Â  Â  toast.error('VocÃª precisa estar logado para criar um evento');
Â  Â  Â  Â  Â  Â  return;
Â  Â  }
Â  Â  
    const formData = new FormData();
Â  Â  Object.entries(form).forEach(([key, value]) => {
Â  Â  Â  Â  if (key === 'image' && value) {
Â  Â  Â  Â  Â  Â  formData.append('images', value as Blob);
Â  Â  Â  Â  } else if (key === 'organizadores') {
Â  Â  Â  Â  Â  Â  formData.append('organizadores', JSON.stringify(value)); // âœ… Envia o array completo
Â  Â  Â  Â  } else if (key === 'preco') {
Â  Â  Â  Â  Â  Â  formData.append(key, String(value) || '0');
Â  Â  Â  Â  } else if (value) {
Â  Â  Â  Â  Â  Â  formData.append(key, value as string);
Â  Â  Â  Â  }
Â  Â  });

Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  await axios.post(
Â  Â  Â  Â  Â  Â  form.image
Â  Â  Â  Â  Â  Â    ? `${import.meta.env.VITE_API_URL}/api/events/create-with-images`
Â  Â  Â  Â  Â  Â    : `${import.meta.env.VITE_API_URL}/api/events/create-event`,
Â  Â  Â  Â  Â  Â  Â  formData,
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â Authorization: `Bearer ${token}`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  'Content-Type': 'multipart/form-data',
Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  toast.success('Evento criado com sucesso!');
Â  Â  Â  Â  Â  Â  navigate('/eventos');
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â console.error('Erro ao criar evento:', error);
Â  Â  Â  Â  Â  Â toast.error('Erro ao criar evento');
Â  Â  Â  Â  }
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <Container sx={{ mt: 4 }}>
Â  Â  Â  Â  Â  Â  <Typography variant="h4" gutterBottom>
Â  Â  Â  Â  Â  Â  Â  Â  Criar Evento
Â  Â  Â  Â  Â  Â  </Typography>
Â  Â  Â  Â  Â  Â  <Box display="flex" flexDirection="column" gap={2}>
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="TÃ­tulo" name="titulo" value={form.titulo} onChange={handleChange} fullWidth required />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="DescriÃ§Ã£o" name="descricao" value={form.descricao} onChange={handleChange} multiline rows={4} />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="Data" type="date" name="data" value={form.data} onChange={handleChange} InputLabelProps={{ shrink: true }} required />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="Hora de InÃ­cio (HHMM)" name="horaInicio" value={form.horaInicio} onChange={handleChange} InputLabelProps={{ shrink: true }} required />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="Hora de Fim (HHMM)" type="time" name="horaFim" value={form.horaFim} onChange={handleChange} InputLabelProps={{ shrink: true }} />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="Local" name="local" value={form.local} onChange={handleChange} required />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="PreÃ§o (opcional)" name="preco" value={form.preco} onChange={handleChange} />
Â  Â  Â  Â  Â  Â  Â  Â  <TextField label="Traje (opcional)" name="traje" value={form.traje} onChange={handleChange} />
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ§  Campos dos organizadores */}
Â  Â  Â  Â  Â  Â  Â  Â  <Typography variant="h6" mt={2}>Organizadores</Typography>
Â  Â  Â  Â  Â  Â  Â  Â  {form.organizadores.map((organizador, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Box key={index} sx={{ border: '1px solid #ccc', padding: 2, borderRadius: 1, mt: 1 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Typography variant="subtitle1">Organizador {index + 1}</Typography>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Nome"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={organizador.nome}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleOrganizerChange(e, index, 'nome')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sx={{ mt: 1 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Email"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={organizador.email}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleOrganizerChange(e, index, 'email')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sx={{ mt: 1 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="WhatsApp"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={organizador.whatsapp}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleOrganizerChange(e, index, 'whatsapp')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sx={{ mt: 1 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Instagram"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={organizador.instagram}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleOrganizerChange(e, index, 'instagram')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sx={{ mt: 1 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {form.organizadores.length > 1 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const updatedOrganizers = [...form.organizadores];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  updatedOrganizers.splice(index, 1);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setForm({ ...form, organizadores: updatedOrganizers });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }} color="error" sx={{ mt: 1 }}>Remover</Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  <Button onClick={handleAddOrganizer} sx={{ mt: 2 }}>Adicionar Organizador</Button>
Â  Â  Â  Â  Â  Â  Â  Â  {/* Upload de imagem */}
Â  Â  Â  Â  Â  Â  Â  Â  <input type="file" name="image" accept="image/*" onChange={handleChange} />
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="contained" color="primary" onClick={handleSubmit} sx={{ mt: 2 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Salvar
Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  </Container>
Â  Â  );
Â  Â 
Â  Â 
}