import React, { useEffect, useState } from 'react'; // Importa as funcionalidades de estado e efeitos do React
import axios from 'axios'; // Importa a biblioteca axios para fazer requisi√ß√µes HTTP
import { Container, Grid, Card, CardContent, Typography, CardMedia, CircularProgress, Link, List, ListItem, ListItemText } from '@mui/material'; // Importa componentes visuais do Material UI
import { toast } from 'react-toastify'; // Importa a biblioteca para exibir notifica√ß√µes (toasts)
import LoginLogoutButtons from '../components/LoginLogoutButtons'; // Importa um componente customizado para bot√µes de login/logout
import { EventData } from '../data/EventData';
import { useAppSelector } from '../store/hooks'

// Componente funcional HomePage
export default function HomePage() {
 // Cria um estado 'events' para armazenar a lista de eventos, inicializado como um array vazio de objetos Event
 const [events, setEvents] = useState<EventData[]>([]);
 // Cria um estado 'loading' para controlar a exibi√ß√£o de um indicador de carregamento, inicializado como true
 const [loading, setLoading] = useState(true);
 const token = useAppSelector((state) => state.auth.token)

 // Hook useEffect √© usado para realizar a√ß√µes ap√≥s a renderiza√ß√£o do componente
 useEffect(() => {
  // Define uma fun√ß√£o ass√≠ncrona para buscar os eventos da API
  const fetchEvents = async () => {
   try {
    // Faz uma requisi√ß√£o GET para a URL da API para buscar os eventos
    const response = await axios.get('https://event-manager-back.onrender.com/api/events');
    // Atualiza o estado 'events' com os dados recebidos da API
    // Verifica se response.data √© um array ou se tem uma propriedade 'events' que √© um array
    setEvents(Array.isArray(response.data) ? response.data : response.data.events || []);
   } catch (error) {
    // Em caso de erro na requisi√ß√£o, loga o erro no console
    console.error('‚ùå Erro ao buscar eventos:', error);
    // Exibe uma notifica√ß√£o de erro para o usu√°rio
    toast.error('Erro ao carregar eventos');
   } finally {
    // A cl√°usula finally garante que 'setLoading' seja chamado, independentemente de sucesso ou falha
    setLoading(false); // Define 'loading' como false, indicando que a busca terminou
   }
  };

  // Chama a fun√ß√£o para buscar os eventos quando o componente √© montado (ou quando suas depend√™ncias mudam, neste caso, nenhuma depend√™ncia)
  fetchEvents();
 }, []); // O array vazio de depend√™ncias significa que este efeito roda apenas uma vez ap√≥s a primeira renderiza√ß√£o

 // Se 'loading' for true, renderiza um indicador de carregamento
 if (loading) {
  return (
   <Container sx={{ mt: 10, textAlign: 'center' }}>
    <CircularProgress /> {/* Componente do Material UI que mostra uma anima√ß√£o de carregamento */}
   </Container>
  );
 }
 const today = new Date()
 // Se 'loading' for false, renderiza a lista de eventos
 return (
  <Container sx={{ mt: 4 }}>
  <Typography variant="h4" gutterBottom>
   Eventos
  </Typography>
  {/* Bot√£o de Meus Eventos s√≥ se estiver logado */}
  {token && (
    <Link href="/events/my-event" style={{ textDecoration: 'none' }}>
     <button style={{ marginBottom: '1rem' }}>üìÅ Meus Eventos</button>
    </Link>
   )}
  {/* Lista de eventos futuros */}
  <List>
   {events.map((event) => {
    const eventDate = new Date(event.data)
    const isPast = eventDate < today

    return (
     <ListItem
      key={event._id}
      sx={{
       backgroundColor: isPast ? '#f0f0f0' : '#fff',
       color: isPast ? '#999' : 'inherit',
       borderBottom: '1px solid #ccc',
      }}
     >
      <ListItemText
       primary={event.titulo}
       secondary={`${eventDate} - ${event.local}`}
      />
      {!isPast && (
       <Link href={`/api/events/${event._id}`} underline="hover">
        Ver detalhes
       </Link>
      )}
     </ListItem>
    )
   })}
  </List>
 <LoginLogoutButtons />
 </Container>
 );
}